# -------------------------------------------------------------------------
# ls and cd aliases
# -------------------------------------------------------------------------
alias la="ls -lahG"
alias ll="ls -aG"
alias dir="ls -lahG"
if [ "$(command -v colorls)" != "" ]; then
    alias cls="colorls -a"
    alias cll="colorls -l"
    alias cla="colorls -la"
fi
alias cdg="cd $HOME/dev/git"
mkcd() { mkdir -p -- "$1" && cd -P -- "$1"; }

# -------------------------------------------------------------------------
# history aliases
# -------------------------------------------------------------------------
alias h="history"
alias hist="history 1"
alias histg="history 1 | grep"

# -------------------------------------------------------------------------
# pretty print
# -------------------------------------------------------------------------
alias psg="ps -ax | grep"
alias ppp='echo -e "${YELLOW}[Pretty Print PATH]\n-------------------${NC}\n${PATH//:/\\n}"'
alias path='echo -e "${YELLOW}[Pretty Print PATH]\n-------------------${NC}\n${PATH//:/\\n}"'
alias pppp='echo -e "${YELLOW}[Pretty Print PYTHONPATH]\n-------------------------${NC}\n${PYTHONPATH//:/\\n}"'

# -------------------------------------------------------------------------
# git aliases
# -------------------------------------------------------------------------
alias gaprt="git tag release && git push origin release && prg && git tag --delete release"
alias gart="git tag release && git push origin release"
alias grrt="git tag --delete release && git push origin :refs/tags/release"
alias glrt="git ls-remote --tags origin"

# -------------------------------------------------------------------------
# pass aliases
# -------------------------------------------------------------------------
alias passme="PASSWORD_STORE_DIR=$HOME/.psws_abk/secrets pass"
alias passco="PASSWORD_STORE_DIR=$HOME/.psws_aai/secrets pass"

# -------------------------------------------------------------------------
# display python package size = dpps
# -------------------------------------------------------------------------
alias dpps="pip list | tail -n +3 | awk '{print \$1}' | xargs pip show | grep -E 'Location:|Name:' | cut -d ' ' -f 2 | paste -d ' ' - - | awk '{print \$2 \"/\" tolower(\$1)}' | xargs du -sh 2> /dev/null | sort -hr"

# -------------------------------------------------------------------------
# kubernetes aliases
# -------------------------------------------------------------------------
if command -v kubectl >/dev/null 2>&1; then
    # basic aliases
    alias k='kubectl'                       # The most common alias
    alias kg='kubectl get'                  # Get resources
    alias kd='kubectl describe'             # Describe resources
    # common resource types
    alias kga='kubectl get all'             # Get everything
    alias kgp='kubectl get pods'
    alias kgs='kubectl get svc'
    alias kgn='kubectl get nodes'
    alias kgns='kubectl get namespaces'
    alias kgd='kubectl get deployments'
    alias kgi='kubectl get ingress'
    alias kgc='kubectl get configmaps'
    alias kgss='kubectl get secrets'
    # create, apply, delete
    alias ka='kubectl apply -f'             # Apply a manifest
    alias kd='kubectl delete -f'            # Delete a manifest
    alias krm='kubectl delete'              # Delete resource by name
    alias ke='kubectl edit'                 # Edit a live resource
    # logs, exec, port-forward
    alias klo='kubectl logs'                # View logs
    alias klf='kubectl logs -f'             # Follow logs
    alias kexec='kubectl exec -it'          # Exec into a pod
    alias kpf='kubectl port-forward'        # Port forward
    # config
    alias kc='kubectl config'                # Manage kubeconfig
    alias kcn='kubectl config view --minify --output "jsonpath={..namespace}"'  # Current namespace
    alias kcc='kubectl config current-context'  # Current context
    alias kcns='kubectl config set-context --current --namespace'  # Set namespace
    alias kctx='kubectl config use-context'  # Switch context
fi

if command -v kubectx >/dev/null 2>&1; then
    alias kctx='kubectx'                    # List/switch contexts
    alias kctxl='kubectx -l'                # List contexts with current highlighted
    alias kctxr='kubectx rename'            # Rename a context
    alias kctxd='kubectx -d'                # Delete a context
fi

if command -v kubens >/dev/null 2>&1; then
    alias kbs='kubens'                      # List/switch namespaces
fi


if [ "$ABK_UNIX_TYPE" = "linux" ]; then
    alias getAwsAccount="aws sts get-caller-identity --query Account --output text | xclip -selection clipboard; echo 'AWS account number is in your clipboard'"
    alias epoch="date +%s | xclip -selection clipboard; echo 'epoch time is in your clipboard'"

    alias apt_update="sudo apt update && sudo apt upgrade -y"

    alias ncpu="grep -c ^processor /proc/cpuinfo"
    alias npcpu="lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l"
    alias nlcpu="getconf _NPROCESSORS_ONLN"

    alias snp="git push && mplayer $HOME_BIN_DIR/env/push_it_x1.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/ahhPushIt.sh"
    # alias prg="git push && mplayer $HOME_BIN_DIR/env/push_it_rg.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/alwaysAI.sh"
    alias prg="git push && mplayer $HOME_BIN_DIR/env/push_it_rg.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/alexIsAwesome.sh"

else # macOS
    alias getAwsAccount="aws sts get-caller-identity --query Account --output text | pbcopy; echo 'AWS account number is in your clipboard'"
    alias epoch="date +%s | pbcopy; echo 'epoch time is in your clipboard'"

    brew_update() {
        PrintTrace $TRACE_INFO "\n${YLW}[Updating brew...]${NC}"
        brew update
        PrintTrace $TRACE_INFO "\n${YLW}[List brew outdated packages...]${NC}"
        brew outdated
        PrintTrace $TRACE_INFO "\n${YLW}[Upgrading brew packages...]${NC}"
        brew upgrade
        PrintTrace $TRACE_INFO "\n${YLW}[Cleaning up brew...]${NC}"
        brew cleanup
        say -v Samantha 'Brew packages updated!'
    }
    brew_update_casks() {
        PrintTrace $TRACE_INFO "\n${YLW}[Updating brew...]${NC}"
        brew update || return $?
        PrintTrace $TRACE_INFO "\n${YLW}[Upgrading brew casks...]${NC}"
        brew upgrade --cask $(brew list --cask) || return $?
        PrintTrace $TRACE_INFO "\n${YLW}[Cleaning up brew...]${NC}"
        brew cleanup || return $?
        say -v Samantha 'Brew casks updated!'
    }

    alias ncpu="sysctl -n hw.ncpu"
    alias npcpu="sysctl -n hw.physicalcpu"
    alias nlcpu="sysctl -n hw.logicalcpu"

    alias snp="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_x1.mp3 && $HOME_BIN_DIR/ahhPushIt.sh"
    # alias prg="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_rg.mp3 && $HOME_BIN_DIR/alwaysAI.sh"
    alias prg="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_rg.mp3 && $HOME_BIN_DIR/alexIsAwesome.sh"
fi

#-------------------------
# add additional aliases files
#-------------------------
echo $ABK_ENV_DIR/aliases_aai.env
if [ -f $ABK_ENV_DIR/aliases_aai.env ]; then
    . $ABK_ENV_DIR/aliases_aai.env
    PrintTrace $TRACE_INFO "  [ðŸŽ¬  added $ABK_ENV_DIR/aliases_aai.env ...]"
fi

if [ -f $ABK_ENV_DIR/aliases_user.env ]; then
    . $ABK_ENV_DIR/aliases_user.env
    PrintTrace $TRACE_INFO "  [ðŸŽ¬  added $ABK_ENV_DIR/aliases_user.env ...]"
fi


#------------------------------------------------------------------------------
# functions
#------------------------------------------------------------------------------
new_guid() {
    local LCL_NEW_GUID=$(uuidgen | tr "[:upper:]" "[:lower:]")
    local LCL_EXIT_CODE=0

    if [ "$ABK_UNIX_TYPE" = "macOS" ]; then
        echo "Copying to clipboard new GUID: $LCL_NEW_GUID"
        echo $LCL_NEW_GUID | tr -d '\n' | pbcopy
    else
        if ! command -v xclip &>/dev/null; then
            echo "New GUID: $LCL_NEW_GUID"
        else
            echo "Copying to clipboard new GUID: $LCL_NEW_GUID"
            echo $LCL_NEW_GUID | xclip
            echo $LCL_NEW_GUID | xclip -sel clip
        fi
    fi

    return $LCL_EXIT_CODE
}
