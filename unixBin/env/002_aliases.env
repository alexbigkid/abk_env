# -------------------------------------------------------------------------
# ls and cd aliases
# -------------------------------------------------------------------------
alias la="ls -lahG"
alias ll="ls -aG"
alias dir="ls -lahG"
if [ "$(command -v colorls)" != "" ]; then
    alias cls="colorls -a"
    alias cll="colorls -l"
    alias cla="colorls -la"
fi
alias cdg="cd $HOME/dev/git"
mkcd() { mkdir -p -- "$1" && cd -P -- "$1"; }

# -------------------------------------------------------------------------
# history aliases
# -------------------------------------------------------------------------
alias h="history"
alias hist="history 1"
alias histg="history 1 | grep"

# -------------------------------------------------------------------------
# pretty print
# -------------------------------------------------------------------------
PrintCmd() {
  local YLW='\033[1;33m'
  local NC='\033[0m'
  echo -e "\n${YLW}$@\n-------------------${NC}"
  eval "$@"
}
PrintPretty() {
    local YLW='\033[1;33m'
    local NC='\033[0m'
    echo -e "\n${YLW}[${1:-NONE}]\n-------------------${NC}\n${2:-NONE}"
}
alias psg="ps -ax | grep"
alias ppp='PrintPretty "PATH" "${PATH//:/\\n}"'
alias path='PrintPretty "PATH" "${PATH//:/\\n}"'
alias pppp='PrintPretty "PYTHONPATH" "${PYTHONPATH//:/\\n}"'

# -------------------------------------------------------------------------
# git aliases
# -------------------------------------------------------------------------
alias gaprt="git tag release && git push origin release && prg && git tag --delete release"
alias gart="git tag release && git push origin release"
alias grrt="git tag --delete release && git push origin :refs/tags/release"
alias glrt="git ls-remote --tags origin"

# -------------------------------------------------------------------------
# pass aliases
# -------------------------------------------------------------------------
alias passme="PASSWORD_STORE_DIR=$HOME/.psws_abk/secrets pass"
alias passco="PASSWORD_STORE_DIR=$HOME/.psws_company/secrets pass"

# -------------------------------------------------------------------------
# display python package size = dpps
# -------------------------------------------------------------------------
alias dpps="pip list | tail -n +3 | awk '{print \$1}' | xargs pip show | grep -E 'Location:|Name:' | cut -d ' ' -f 2 | paste -d ' ' - - | awk '{print \$2 \"/\" tolower(\$1)}' | xargs du -sh 2> /dev/null | sort -hr"

# -------------------------------------------------------------------------
# kubernetes aliases
# -------------------------------------------------------------------------
if command -v kubectl >/dev/null 2>&1; then
    # basic aliases
    alias k='PrintCmd kubectl'                       # The most common alias
    alias kg='PrintCmd kubectl get'                  # Get resources
    alias kd='PrintCmd kubectl describe'             # Describe resources
    # common resource types
    alias kga='PrintCmd kubectl get all'             # Get everything
    alias kgp='PrintCmd kubectl get pods'
    alias kgs='PrintCmd kubectl get svc'
    alias kgn='PrintCmd kubectl get nodes'
    alias kgns='PrintCmd kubectl get namespaces'
    alias kgd='PrintCmd kubectl get deployments'
    alias kgi='PrintCmd kubectl get ingress'
    alias kgcm='PrintCmd kubectl get configmaps'
    alias kgsfs='PrintCmd kubectl get statefulset'
    alias kgss='PrintCmd kubectl get secrets'
    alias kgcrd='PrintCmd kubectl get crd'
    # create, apply, delete
    alias ka='PrintCmd kubectl apply -f'             # Apply a manifest
    alias kd='PrintCmd kubectl delete -f'            # Delete a manifest
    alias krm='PrintCmd kubectl delete'              # Delete resource by name
    alias ke='PrintCmd kubectl edit'                 # Edit a live resource
    # logs, exec, port-forward
    alias klo='PrintCmd kubectl logs'                # View logs
    alias klf='PrintCmd kubectl logs -f'             # Follow logs
    alias kexec='PrintCmd kubectl exec -it'          # Exec into a pod
    alias kpf='PrintCmd kubectl port-forward'        # Port forward
    # config
    alias kc='PrintCmd kubectl config'                # Manage kubeconfig
    alias kcn='PrintCmd kubectl config view --minify --output "jsonpath={..namespace}"'  # Current namespace
    alias kcc='PrintCmd kubectl config current-context'  # Current context
    alias kcns='PrintCmd kubectl config set-context --current --namespace'  # Set namespace
    alias kctx='PrintCmd kubectl config use-context'  # Switch context
fi

if command -v kubectx >/dev/null 2>&1; then
    alias kctx='PrintCmd kubectx'                    # List/switch contexts
    alias kctxl='PrintCmd kubectx -l'                # List contexts with current highlighted
    alias kctxr='PrintCmd kubectx rename'            # Rename a context
    alias kctxd='PrintCmd kubectx -d'                # Delete a context
fi

if command -v kubens >/dev/null 2>&1; then
    alias kbs='PrintCmd kubens'                      # List/switch namespaces
fi


if [ "$ABK_UNIX_TYPE" = "linux" ]; then
    alias getAwsAccount="PrintCmd aws sts get-caller-identity --query Account --output text | xclip -selection clipboard; echo 'AWS account number is in your clipboard'"
    alias epoch="date +%s | xclip -selection clipboard; echo 'epoch time is in your clipboard'"

    alias apt_update="PrintCmd sudo apt update && sudo apt upgrade -y"

    alias ncpu="PrintCmd grep -c ^processor /proc/cpuinfo"
    alias npcpu="PrintCmd lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l"
    alias nlcpu="PrintCmd getconf _NPROCESSORS_ONLN"

    alias snp="git push && mplayer $HOME_BIN_DIR/env/push_it_x1.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/ahhPushIt.sh"
    # alias prg="git push && mplayer $HOME_BIN_DIR/env/push_it_rg.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/alwaysAI.sh"
    alias prg="git push && mplayer $HOME_BIN_DIR/env/push_it_rg.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/alexIsAwesome.sh"

else # macOS
    alias getAwsAccount="PrintCmd aws sts get-caller-identity --query Account --output text | pbcopy; echo 'AWS account number is in your clipboard'"
    alias epoch="date +%s | pbcopy; echo 'epoch time is in your clipboard'"

    brew_update() {
        PrintTrace "$TRACE_INFO" "\n${YLW}[Updating brew...]${NC}"
        brew update
        PrintTrace "$TRACE_INFO" "\n${YLW}[List brew outdated packages...]${NC}"
        brew outdated
        PrintTrace "$TRACE_INFO" "\n${YLW}[Upgrading brew packages...]${NC}"
        brew upgrade
        PrintTrace "$TRACE_INFO" "\n${YLW}[Cleaning up brew...]${NC}"
        brew cleanup
        say -v Samantha 'Brew packages updated!'
    }
    brew_update_casks() {
        PrintTrace "$TRACE_INFO" "\n${YLW}[Updating brew...]${NC}"
        brew update || return $?
        PrintTrace "$TRACE_INFO" "\n${YLW}[Upgrading brew casks...]${NC}"
        brew upgrade --cask $(brew list --cask) || return $?
        PrintTrace "$TRACE_INFO" "\n${YLW}[Cleaning up brew...]${NC}"
        brew cleanup || return $?
        say -v Samantha 'Brew casks updated!'
    }
    alias brew_update_all="brew_update && brew_update_casks"

    alias ncpu="PrintCmd sysctl -n hw.ncpu"
    alias npcpu="PrintCmd sysctl -n hw.physicalcpu"
    alias nlcpu="PrintCmd sysctl -n hw.logicalcpu"

    alias snp="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_x1.mp3 && $HOME_BIN_DIR/ahhPushIt.sh"
    # alias prg="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_rg.mp3 && $HOME_BIN_DIR/alwaysAI.sh"
    alias prg="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_rg.mp3 && $HOME_BIN_DIR/alexIsAwesome.sh"
fi

#-------------------------
# add additional aliases files
#-------------------------
if [ -f $ABK_ENV_DIR/aliases_company.env ]; then
    . $ABK_ENV_DIR/aliases_company.env
    PrintTrace "$TRACE_INFO" "  [ðŸŽ¬  added $ABK_ENV_DIR/aliases_company.env ...]"
fi

if [ -f $ABK_ENV_DIR/aliases_user.env ]; then
    . $ABK_ENV_DIR/aliases_user.env
    PrintTrace "$TRACE_INFO" "  [ðŸŽ¬  added $ABK_ENV_DIR/aliases_user.env ...]"
fi


#------------------------------------------------------------------------------
# functions
#------------------------------------------------------------------------------
new_guid() {
    local LCL_NEW_GUID=$(uuidgen | tr "[:upper:]" "[:lower:]")
    local LCL_EXIT_CODE=0

    if [ "$ABK_UNIX_TYPE" = "macOS" ]; then
        echo "Copying to clipboard new GUID: $LCL_NEW_GUID"
        echo $LCL_NEW_GUID | tr -d '\n' | pbcopy
    else
        if ! command -v xclip &>/dev/null; then
            echo "New GUID: $LCL_NEW_GUID"
        else
            echo "Copying to clipboard new GUID: $LCL_NEW_GUID"
            echo $LCL_NEW_GUID | xclip
            echo $LCL_NEW_GUID | xclip -sel clip
        fi
    fi

    return $LCL_EXIT_CODE
}
