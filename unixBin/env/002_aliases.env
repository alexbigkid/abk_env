# unix cmds
alias la="ls -lahG"
alias ll="ls -aG"
alias dir="ls -lahG"
if [ "$(command -v colorls)" != "" ]; then
    alias cls="colorls -a"
    alias cll="colorls -l"
    alias cla="colorls -la"
fi

alias h="history"
alias hist="history 1"
alias histg="history 1 | grep"
alias psg="ps -ax | grep"
alias ppp='echo -e "${YELLOW}[Pretty Print PATH]\n-------------------${NC}\n${PATH//:/\\n}"'
alias path='echo -e "${YELLOW}[Pretty Print PATH]\n-------------------${NC}\n${PATH//:/\\n}"'
alias pppp='echo -e "${YELLOW}[Pretty Print PYTHONPATH]\n-------------------------${NC}\n${PYTHONPATH//:/\\n}"'

alias gaprt="git tag release && git push origin release && prg && git tag --delete release"
alias gart="git tag release && git push origin release"
alias grrt="git tag --delete release && git push origin :refs/tags/release"
alias glrt="git ls-remote --tags origin"

alias cdg="cd $HOME/dev/git"

# display python package size = dpps
alias dpps="pip list | tail -n +3 | awk '{print \$1}' | xargs pip show | grep -E 'Location:|Name:' | cut -d ' ' -f 2 | paste -d ' ' - - | awk '{print \$2 \"/\" tolower(\$1)}' | xargs du -sh 2> /dev/null | sort -hr"

if [ "$AAI_UNIX_TYPE" = "linux" ]; then
    alias getAwsAccount="aws sts get-caller-identity --query Account --output text | xclip -selection clipboard; echo 'AWS account number is in your clipboard'"
    alias epoch="date +%s | xclip -selection clipboard; echo 'epoch time is in your clipboard'"

    alias apt_update="sudo apt update && sudo apt upgrade -y"

    alias ncpu="grep -c ^processor /proc/cpuinfo"
    alias npcpu="lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l"
    alias nlcpu="getconf _NPROCESSORS_ONLN"

    alias snp="git push && mplayer $HOME_BIN_DIR/env/push_it_x1.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/ahhPushIt.sh"
    alias prg="git push && mplayer $HOME_BIN_DIR/env/push_it_rg.mp3 >/dev/null 2>&1 && $HOME_BIN_DIR/alwaysAI.sh"

else # macOS
    alias getAwsAccount="aws sts get-caller-identity --query Account --output text | pbcopy; echo 'AWS account number is in your clipboard'"
    alias epoch="date +%s | pbcopy; echo 'epoch time is in your clipboard'"

    alias brew_update="brew update && brew outdated && brew upgrade && brew cleanup && say -v Samantha 'Brew update done!'"

    alias ncpu="sysctl -n hw.ncpu"
    alias npcpu="sysctl -n hw.physicalcpu"
    alias nlcpu="sysctl -n hw.logicalcpu"

    alias snp="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_x1.mp3 && $HOME_BIN_DIR/ahhPushIt.sh"
    alias prg="git push && afplay -v 1 $HOME_BIN_DIR/env/push_it_rg.mp3 && $HOME_BIN_DIR/alwaysAI.sh"
fi

#------------------------------------------------------------------------------
# functions
#------------------------------------------------------------------------------
mkcd() { mkdir -p -- "$1" && cd -P -- "$1"; }

abk_ssh() {
    if [ "$#" -ne 1 ] || [ "$1" = "--help" ] || [ "$1" = "-h"  ]; then
        echo "This alias function will use ssh to login to the remote device"
        echo "Usage: $0 <remote_host>"
        return
    fi
    local LCL_REMOTE_HOST=$1
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    sshpass -e ssh ${SSHUSER}@${LCL_REMOTE_HOST}
    unset SSHPASS
}

abk_scp() {
    # check 3 parameters, it is not help and the first parameter is a file
    if [ "$#" -ne 3 ] || [ ! -f "$1" ]; then
        echo "This alias function will copy local file to the remote host device over ssh"
        echo "Usage: $0 <local_file> <remote_host> <remote_dir>"
        return
    fi
    local LCL_LOCAL_FILE=$1
    local LCL_REMOTE_HOST=$2
    local LCL_REMOTE_DIR=$3
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    sshpass -e scp ${LCL_LOCAL_FILE} ${SSHUSER}@${LCL_REMOTE_HOST}:${LCL_REMOTE_DIR}
    unset SSHPASS
}

abk_scpd() {
    # check 3 parameters, it is not help and the first parameter is a dir
    if [ "$#" -ne 3 ] [ ! -d "$1" ]; then
        echo "This alias function will copy local directory to the remote host device over ssh"
        echo "Usage: $0 <local_dir> <remote_host> <remote_dir>"
        return
    fi
    local LCL_LOCAL_DIR=$1
    local LCL_REMOTE_HOST=$2
    local LCL_REMOTE_DIR=$3
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    sshpass -e scp -rp ${LCL_LOCAL_DIR} ${SSHUSER}@${LCL_REMOTE_HOST}:${LCL_REMOTE_DIR}
    unset SSHPASS
}

abk_rsync() {
    # check 3 parameters
    if [ "$#" -ne 3 ]; then
        echo "This alias function will sync local directory to the remote host device over ssh"
        echo "Usage: $0 <local_dir> <remote_host> <remote_dir>"
        return
    fi
    local LCL_LOCAL_DIR=$1
    local LCL_REMOTE_HOST=$2
    local LCL_REMOTE_DIR=$3
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    # rsync -av /local/dir/ server:/remote/dir/
    sshpass -e rsync -av ${LCL_LOCAL_DIR} ${SSHUSER}@${LCL_REMOTE_HOST}:${LCL_REMOTE_DIR}
    unset SSHPASS
}


new_guid() {
    local LCL_NEW_GUID=$(uuidgen | tr "[:upper:]" "[:lower:]")
    local LCL_EXIT_CODE=0

    if [ "$AAI_UNIX_TYPE" = "macOS" ]; then
        echo "Copying to clipboard new GUID: $LCL_NEW_GUID"
        echo $LCL_NEW_GUID | tr -d '\n' | pbcopy
    else
        if ! command -v xclip &>/dev/null; then
            echo "New GUID: $LCL_NEW_GUID"
        else
            echo "Copying to clipboard new GUID: $LCL_NEW_GUID"
            echo $LCL_NEW_GUID | xclip
            echo $LCL_NEW_GUID | xclip -sel clip
        fi
    fi

    return $LCL_EXIT_CODE
}
