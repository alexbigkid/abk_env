if [ "$ABK_UNIX_TYPE" = "linux" ]; then
    alias ssh_add_gh="ssh-add $HOME/.ssh/alexbigkid-github"
else
    alias ssh_add_gh="ssh-add --apple-use-keychain $HOME/.ssh/alexbigkid-github"
fi


#------------------------------------------------------------------------------
# functions
#------------------------------------------------------------------------------
abk_ssh() {
    if [ "$#" -ne 1 ] || [ "$1" = "--help" ] || [ "$1" = "-h"  ]; then
        echo "This alias function will use ssh to login to the remote device"
        echo "Usage: $0 <remote_host>"
        echo
        return
    fi
    local LCL_REMOTE_HOST=$1
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    sshpass -e ssh ${SSHUSER}@${LCL_REMOTE_HOST}
    unset SSHPASS
}

abk_scp() {
    # check 3 parameters, it is not help and the first parameter is a file
    if [ "$#" -ne 3 ] || [ ! -f "$1" ]; then
        echo "This alias function will copy local file to the remote host device over ssh"
        echo "Usage: $0 <local_file> <remote_host> <remote_dir>"
        echo
        return
    fi
    local LCL_LOCAL_FILE=$1
    local LCL_REMOTE_HOST=$2
    local LCL_REMOTE_DIR=$3
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    sshpass -e scp ${LCL_LOCAL_FILE} ${SSHUSER}@${LCL_REMOTE_HOST}:${LCL_REMOTE_DIR}
    unset SSHPASS
}

abk_scpd() {
    # check 3 parameters, it is not help and the first parameter is a dir
    if [ "$#" -ne 3 ] || [ ! -d "$1" ]; then
        echo "This alias function will copy local directory to the remote host device over ssh"
        echo "Usage: $0 <local_dir> <remote_host> <remote_dir>"
        echo
        return
    fi
    local LCL_LOCAL_DIR=$1
    local LCL_REMOTE_HOST=$2
    local LCL_REMOTE_DIR=$3
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    sshpass -e scp -rp ${LCL_LOCAL_DIR} ${SSHUSER}@${LCL_REMOTE_HOST}:${LCL_REMOTE_DIR}
    unset SSHPASS
}

abk_rsync() {
    # check 3 parameters
    if [ "$#" -ne 3 ]; then
        echo "This alias function will sync local directory to the remote host device over ssh"
        echo "Usage: $0 <local_dir> <remote_host> <remote_dir>"
        echo
        return
    fi
    local LCL_LOCAL_DIR=$1
    local LCL_REMOTE_HOST=$2
    local LCL_REMOTE_DIR=$3
    local SSHUSER=$(pass abk/ssh/${LCL_REMOTE_HOST}_usr)
    export SSHPASS=$(pass abk/ssh/${LCL_REMOTE_HOST}_psw)
    sshpass -e rsync -av ${LCL_LOCAL_DIR} ${LCL_REMOTE_HOST}:${LCL_REMOTE_DIR}
    unset SSHPASS
}

git_sub_dirs() {
    for dir in */; do
        if [ -d "$dir/.git" ]; then
            branch=$(git -C "$dir" symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's|^origin/||')
            echo "$dir -> $branch"
        fi
    done
}

cwt() {
    # exit if any errors
    set -e

    # validate we get exactly one parameter
    if [ "$#" -ne 1 ]; then
        echo "This alias function will create a new git branch and switch to it"
        echo "Usage: $0 <branch_name>"
        echo
        return 1
    fi
    local LCL_BRANCH_NAME=$1

    # check if the branch name is valid
    if [[ ! "$LCL_BRANCH_NAME" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
        echo "Invalid branch name: $LCL_BRANCH_NAME"
        echo "Branch names can only contain alphanumeric characters, forward slashes, underscores, and hyphens."
        return 1
    fi

    # check if we are in bash or zsh. this is needed because git checkout -b does not work in fish shell
    local LCL_SHELL="${SHELL##*/}"
    if [ "$LCL_SHELL" != "bash" ] && [ "$LCL_SHELL" != "zsh" ]; then
        echo "This function is only available in bash or zsh."
        return 1
    fi

    # check if the dir has a git repo
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        echo "This function can only be used inside a git repository."
        return 1
    fi

    # get current git repo dir (need to be in a git repo)
    local LCL_GIT_PRJ_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
    echo "Current git project directory: $LCL_GIT_PRJ_DIR"

    # get base name for current project directory
    local LCL_GIT_PRJ_NAME=$(basename "$LCL_GIT_PRJ_DIR")
    echo "Current git project name: $LCL_GIT_PRJ_NAME"

    # define parent folder where all work trees will be stored
    local LCL_WORK_TREES_DIR=$(dirname "$LCL_GIT_PRJ_DIR")/"${LCL_GIT_PRJ_NAME}-worktrees"
    echo "Work trees directory: $LCL_WORK_TREES_DIR"
    mkdir -p "$LCL_WORK_TREES_DIR"

    # get the full path for the new work tree
    local LCL_NEW_WORK_TREE="$LCL_WORK_TREES_DIR/$LCL_BRANCH_NAME"
    echo "New work tree path: $LCL_NEW_WORK_TREE"

    # create the new work tree and switch to it
    git -C "$LCL_GIT_PRJ_DIR" worktree add -b "$LCL_BRANCH_NAME" "$LCL_NEW_WORK_TREE"

    # open editor in new work tree (keep current shell in original directory)
    (
        cd "$LCL_NEW_WORK_TREE" || {echo "Failed to switch to the new work tree: $LCL_NEW_WORK_TREE"; exit 1;}
        echo "Work tree created at: $LCL_NEW_WORK_TREE"
        
        # open in editor if available
        if command -v code >/dev/null 2>&1; then
            code . &
            echo "Opened VS Code in the new work tree."
        fi
    )
    
    echo "✅ Work tree: $LCL_BRANCH_NAME created at $LCL_NEW_WORK_TREE and checked out."
}

dwt() {
    # exit if any errors
    set -e

    # validate we get exactly one parameter
    if [ "$#" -ne 1 ]; then
        echo "This alias function will delete a git work tree after finishing work on it"
        echo "Usage: $0 <branch_name>"
        echo
        return 1
    fi
    local LCL_BRANCH_NAME=$1

    # check if the branch name is valid
    if [[ ! "$LCL_BRANCH_NAME" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
        echo "Invalid branch name: $LCL_BRANCH_NAME"
        echo "Branch names can only contain alphanumeric characters, forward slashes, underscores, and hyphens."
        return 1
    fi

    # check if we are in bash or zsh
    local LCL_SHELL="${SHELL##*/}"
    if [ "$LCL_SHELL" != "bash" ] && [ "$LCL_SHELL" != "zsh" ]; then
        echo "This function is only available in bash or zsh."
        return 1
    fi

    # check if the dir has a git repo
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        echo "This function can only be used inside a git repository."
        return 1
    fi

    # get current git repo dir
    local LCL_GIT_PRJ_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
    echo "Current git project directory: $LCL_GIT_PRJ_DIR"

    # get base name for current project directory
    local LCL_GIT_PRJ_NAME=$(basename "$LCL_GIT_PRJ_DIR")
    echo "Current git project name: $LCL_GIT_PRJ_NAME"

    # define parent folder where work trees are stored
    local LCL_WORK_TREES_DIR=$(dirname "$LCL_GIT_PRJ_DIR")/"${LCL_GIT_PRJ_NAME}-worktrees"
    echo "Work trees directory: $LCL_WORK_TREES_DIR"

    # get the full path for the work tree to delete
    local LCL_WORK_TREE_PATH="$LCL_WORK_TREES_DIR/$LCL_BRANCH_NAME"
    echo "Work tree path to delete: $LCL_WORK_TREE_PATH"

    # check if the work tree exists
    if [ ! -d "$LCL_WORK_TREE_PATH" ]; then
        echo "Work tree does not exist: $LCL_WORK_TREE_PATH"
        return 1
    fi

    # check if the branch exists
    if ! git -C "$LCL_GIT_PRJ_DIR" show-ref --verify --quiet "refs/heads/$LCL_BRANCH_NAME"; then
        echo "Branch does not exist: $LCL_BRANCH_NAME"
        return 1
    fi

    # get main branch name
    local LCL_MAIN_BRANCH=$(git -C "$LCL_GIT_PRJ_DIR" symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
    echo "Main branch: $LCL_MAIN_BRANCH"

    # fetch latest changes from remote
    echo "Fetching latest changes from remote..."
    git -C "$LCL_GIT_PRJ_DIR" fetch origin

    # check if the branch has been merged into main
    if ! git -C "$LCL_GIT_PRJ_DIR" merge-base --is-ancestor "$LCL_BRANCH_NAME" "origin/$LCL_MAIN_BRANCH"; then
        echo "❌ Branch $LCL_BRANCH_NAME has not been merged into $LCL_MAIN_BRANCH yet."
        echo "Please merge the branch first (manually or via GitHub PR) before deleting the worktree."
        return 1
    fi

    echo "✅ Branch $LCL_BRANCH_NAME has been merged into $LCL_MAIN_BRANCH"

    # remove the worktree
    echo "Removing worktree: $LCL_WORK_TREE_PATH"
    git -C "$LCL_GIT_PRJ_DIR" worktree remove "$LCL_WORK_TREE_PATH"

    # delete the local branch
    echo "Deleting local branch: $LCL_BRANCH_NAME"
    git -C "$LCL_GIT_PRJ_DIR" branch -d "$LCL_BRANCH_NAME"

    echo "✅ Work tree and branch $LCL_BRANCH_NAME successfully deleted (already merged into $LCL_MAIN_BRANCH)"
}
