{
    "linux": {
        "debian": {
            "description": "Installing ABK tool set for Linux / Debian based distro",
            "supported_versions": {
                "debian": ["11", "12"],
                "raspbian": ["11", "12"],
                "ubuntu": ["22.04", "24.04"]
            },
            "update_packages": [
                "sudo rm -f /var/lib/dpkg/lock* /var/cache/apt/archives/lock",
                "sudo DEBIAN_FRONTEND=noninteractive apt update",
                "sudo apt-mark hold systemd || true",
                "sudo DEBIAN_FRONTEND=noninteractive dpkg --configure -a --force-depends || true",
                "sudo DEBIAN_FRONTEND=noninteractive apt --fix-broken install -y || true"
            ],
            "tools": {
                "descriptions": {
                    "aws": "Amazon Web Services CLI - command line interface for AWS services and resources",
                    "bat": "A cat clone with syntax highlighting, Git integration, and automatic paging",
                    "direnv": "Environment variable manager that automatically loads/unloads variables based on directory",
                    "eza": "Modern replacement for ls with colors, icons, and Git status (successor to exa)",
                    "ffmpeg": "Complete multimedia framework for recording, converting and streaming audio/video",
                    "fzf": "Command-line fuzzy finder for files, command history, processes, and more",
                    "gh": "GitHub CLI - official command line tool for GitHub operations and workflows",
                    "git": "Distributed version control system for tracking changes in source code",
                    "gpg": "GNU Privacy Guard - encryption and signing tool for secure communication",
                    "jq": "Command-line JSON processor for parsing, filtering and transforming JSON data",
                    "just": "Command runner and build tool - a simpler, more modern alternative to make",
                    "kind": "Kubernetes in Docker - tool for running local Kubernetes clusters using Docker containers",
                    "mplayer": "Cross-platform multimedia player that supports a wide variety of audio/video formats",
                    "nmap": "Network discovery and security auditing tool for port scanning and network mapping",
                    "nodenv": "Node.js version manager that allows easy switching between Node.js versions",
                    "oh-my-posh": "Cross-platform prompt theme engine for any shell with customizable themes",
                    "parallel": "GNU parallel - tool for executing jobs in parallel using one or more computers",
                    "pass": "The standard Unix password manager - stores passwords in encrypted files using GPG",
                    "serverless": "Framework for building serverless applications on AWS Lambda, Azure, Google Cloud",
                    "shellcheck": "Static analysis tool for shell scripts that finds bugs and suggests improvements",
                    "tfenv": "Terraform version manager for easy switching between Terraform versions",
                    "tree": "Recursive directory listing command that displays directories as trees",
                    "uv": "Fast Python package installer and resolver, designed as a drop-in replacement for pip",
                    "wget": "Command-line utility for downloading files from web servers via HTTP/HTTPS/FTP",
                    "xclip": "Command line interface to X11 clipboard for copying/pasting in terminal",
                    "yq": "Command-line YAML processor - the YAML equivalent of jq for parsing and manipulating YAML"
                },
                "check": {
                    "aws": ["command -v aws"],
                    "bat": ["command -v bat"],
                    "direnv": ["command -v direnv"],
                    "ffmpeg": ["command -v ffmpeg"],
                    "fzf": ["command -v fzf"],
                    "gh": ["command -v gh"],
                    "git": ["command -v git"],
                    "pass": ["command -v pass"],
                    "gpg": ["command -v gpg"],
                    "jq": ["command -v jq"],
                    "just": ["command -v just"],
                    "kind": ["command -v kind"],
                    "mplayer": ["command -v mplayer"],
                    "nmap": ["command -v nmap"],
                    "nodenv": ["command -v nodenv"],
                    "oh-my-posh": ["command -v ./unixBin/oh-my-posh"],
                    "parallel": ["command -v parallel"],
                    "serverless": ["command -v serverless"],
                    "shellcheck": ["command -v shellcheck"],
                    "tfenv": ["command -v tfenv"],
                    "tree": ["command -v tree"],
                    "uv": ["command -v uv"],
                    "wget": ["command -v wget"],
                    "yq": ["command -v yq"],
                    "xclip": ["command -v xclip"]
                },
                "install": {
                    "aws": [
                        "curl \"https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip\" -o \"awscliv2.zip\"",
                        "unzip awscliv2.zip",
                        "sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli",
                        "[ -d ./aws ] && rm -Rf aws",
                        "[ -e ./awscliv2.zip ] && rm -f awscliv2.zip",
                        "(cd unixBin/env && [ ! -L LINK_aws.env ] && ln -s XXX_aws.env LINK_aws.env || true)"
                    ],
                    "bat": [
                        "curl -L https://github.com/sharkdp/bat/releases/download/v0.24.0/bat_0.24.0_amd64.deb -o bat.deb",
                        "sudo DEBIAN_FRONTEND=noninteractive dpkg -i bat.deb --force-depends || true",
                        "sudo DEBIAN_FRONTEND=noninteractive apt-get install -f -y --no-install-recommends || true",
                        "rm -f bat.deb"
                    ],
                    "direnv": [
                        "sudo DEBIAN_FRONTEND=noninteractive apt install -y direnv --no-install-recommends",
                        "(cd unixBin/env && [ ! -L LINK_direnv.env ] && ln -s XXX_direnv.env LINK_direnv.env || true)"
                    ],
                    "ffmpeg": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y ffmpeg --no-install-recommends"],
                    "fzf": [
                        "sudo DEBIAN_FRONTEND=noninteractive apt install -y fzf --no-install-recommends",
                        "(cd unixBin/env && [ ! -L LINK_fzf.env ] &&ln -s XXX_fzf.env LINK_fzf.env || true)"
                    ],
                    "gh": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y gh --no-install-recommends"],
                    "git": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y git --no-install-recommends"],
                    "pass": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y pass --no-install-recommends"],
                    "gpg": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y gnupg --no-install-recommends"],
                    "jq": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y jq --no-install-recommends"],
                    "just": [
                        "curl -L https://github.com/casey/just/releases/download/1.36.0/just-1.36.0-x86_64-unknown-linux-musl.tar.gz -o just.tar.gz",
                        "tar -xzf just.tar.gz",
                        "sudo mv just /usr/local/bin/just",
                        "sudo chmod +x /usr/local/bin/just",
                        "rm -f just.tar.gz"
                    ],
                    "kind": [
                        "curl -L https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64 -o kind",
                        "sudo mv kind /usr/local/bin/kind",
                        "sudo chmod +x /usr/local/bin/kind"
                    ],
                    "mplayer": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y mplayer --no-install-recommends"],
                    "nmap": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y nmap --no-install-recommends"],
                    "nodenv": [
                        "git clone https://github.com/nodenv/nodenv.git ~/.nodenv",
                        "sudo ln -vs ~/.nodenv/bin/nodenv /usr/local/bin/nodenv",
                        "(cd ~/.nodenv src/configure && make -C src || true)",
                        "mkdir -p $(nodenv root)/plugins",
                        "git clone https://github.com/nodenv/node-build.git $(nodenv root)/plugins/node-build",
                        "git clone https://github.com/nodenv/nodenv-aliases.git $(nodenv root)/plugins/nodenv-aliases",
                        "export PATH=\"$HOME/.nodenv/bin:$PATH\" && eval \"$(nodenv init -)\"",
                        "nodenv install 22.18.0",
                        "nodenv global 22.18.0",
                        "node --version",
                        "npm --version",
                        "(cd unixBin/env && [ ! -L LINK_nodenv.env ] && ln -s XXX_nodenv.env LINK_nodenv.env || true)"
                    ],
                    "oh-my-posh": [
                        "curl -s https://ohmyposh.dev/install.sh | bash -s -- -d ./unixBin",
                        "./unixBin/oh-my-posh init $ABK_SHELL",
                        "(cd unixBin/env && [ ! -L LINK_oh-my-posh.env ] &&ln -s XXX_oh-my-posh.env LINK_oh-my-posh.env || true)"
                    ],
                    "parallel": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y parallel --no-install-recommends"],
                    "serverless": [
                        "export PATH=\"$HOME/.nodenv/bin:$PATH\" && eval \"$(nodenv init -)\"",
                        "npm install -g serverless"
                    ],
                    "shellcheck": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y shellcheck --no-install-recommends"],
                    "tfenv": [
                        "git clone https://github.com/tfutils/tfenv.git ~/.tfenv",
                        "sudo ln -vs ~/.tfenv/bin/tfenv /usr/local/bin/tfenv",
                        "(cd unixBin/env && [ ! -L LINK_tfenv.env ] && ln -s XXX_tfenv.env LINK_tfenv.env || true)"
                    ],
                    "tree": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y tree --no-install-recommends"],
                    "uv": [
                        "curl -LsSf https://astral.sh/uv/install.sh | sh",
                        "(cd \"$HOME/.local/bin\" && ./uv tool install ruff) || true",
                        "(cd unixBin/env && [ ! -L LINK_uv.env ] && ln -s XXX_uv.env LINK_uv.env || true)"
                    ],
                    "wget": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y wget --no-install-recommends"],
                    "yq": [
                        "curl -L https://github.com/mikefarah/yq/releases/download/v4.44.5/yq_linux_amd64 -o yq",
                        "sudo mv yq /usr/local/bin/yq",
                        "sudo chmod +x /usr/local/bin/yq"
                    ],
                    "xclip": ["sudo DEBIAN_FRONTEND=noninteractive apt install -y xclip --no-install-recommends"]
                },
                "uninstall": {
                    "aws": [
                        "find ./unixBin/env -type l -name 'LINK_aws.env' -delete || true",
                        "sudo find /usr/local/bin -type l -name 'aws' -delete || true",
                        "sudo find /usr/local/bin -type l -name 'aws_completer' -delete || true",
                        "[ -d /usr/local/aws-cli ] && sudo rm -Rf /usr/local/aws-cli"
                    ],
                    "bat": ["sudo apt remove -y bat"],
                    "direnv": [
                        "find ./unixBin/env -type l -name 'LINK_direnv.env' -delete || true",
                        "sudo apt remove -y direnv"
                    ],
                    "ffmpeg": ["sudo apt remove -y ffmpeg"],
                    "fzf": [
                        "find ./unixBin/env -type l -name 'LINK_fzf.env' -delete || true",
                        "sudo apt remove -y fzf"
                    ],
                    "gh": ["sudo apt remove -y gh"],
                    "git": ["sudo apt remove -y git"],
                    "pass": ["sudo apt remove -y pass"],
                    "gpg": ["sudo apt remove -y gnupg"],
                    "jq": ["sudo apt remove -y jq"],
                    "just": ["sudo rm -f /usr/local/bin/just"],
                    "kind": ["sudo rm -f /usr/local/bin/kind"],
                    "mplayer": ["sudo apt remove -y mplayer"],
                    "nmap": ["sudo apt remove -y nmap"],
                    "nodenv": [
                        "find ./unixBin/env -type l -name 'LINK_nodenv.env' -delete || true",
                        "sudo find /usr/local/bin -type l -name 'nodenv' -delete || true",
                        "rm -Rf ~/.nodenv"
                    ],
                    "oh-my-posh": [
                        "find ./unixBin/env -type l -name 'LINK_oh-my-posh.env' -delete || true",
                        "rm -f ./unixBin/oh-my-posh"
                    ],
                    "parallel": ["sudo apt remove -y parallel"],
                    "serverless": [
                        "if command -v nodenv >/dev/null 2>&1; then export PATH=\"$HOME/.nodenv/bin:$PATH\" && eval \"$(nodenv init -)\" 2>/dev/null || true; fi",
                        "if command -v npm >/dev/null 2>&1; then npm uninstall -g serverless 2>/dev/null || echo 'serverless uninstall failed, but continuing'; else echo 'npm not found, skipping serverless uninstall'; fi"
                    ],
                    "shellcheck": ["sudo apt remove -y shellcheck"],
                    "tfenv": [
                        "find ./unixBin/env -type l -name 'LINK_tfenv.env' -delete || true",
                        "sudo find /usr/local/bin -type l -name 'tfenv' -delete || true",
                        "rm -Rf ~/.tfenv"
                    ],
                    "tree": ["sudo apt remove -y tree"],
                    "uv": [
                        "find ./unixBin/env -type l -name 'LINK_uv.env' -delete || true",
                        "if command -v uv >/dev/null 2>&1; then uv tool uninstall ruff 2>/dev/null || true; fi",
                        "if command -v uv >/dev/null 2>&1; then uv cache clean 2>/dev/null || true; fi",
                        "if command -v uv >/dev/null 2>&1; then rm -rf \"$(uv python dir)\" 2>/dev/null || true; fi",
                        "if command -v uv >/dev/null 2>&1; then rm -rf \"$(uv tool dir)\" 2>/dev/null || true; fi",
                        "rm -f ~/.local/bin/uv ~/.local/bin/uvx"
                    ],
                    "wget": ["sudo apt remove -y wget"],
                    "yq": ["sudo rm -f /usr/local/bin/yq"],
                    "xclip": ["sudo apt remove -y xclip"]
                }
            },
            "apps": {
                "check": {
                },
                "install":{
                },
                "uninstall": {
                }
            },
            "fonts": {
                "check": {
                    "font_installation_start": [""],
                    "font-agave-nerd-font": ["ls ~/.fonts/AgaveNerdFont*"],
                    "font-comic-shanns-mono-nerd-font": ["ls ~/.fonts/ComicShannsMonoNerdFont*"],
                    "font-droid-sans-mono-nerd-font": ["ls ~/.fonts/DroidSansMNerdFont*"],
                    "font-cascadia-code": ["ls ~/.fonts/CaskaydiaCoveNerdFont*"],
                    "font-hack-nerd-font": ["ls ~/.fonts/Hack*"],
                    "font_installation_cleanup": [""]
                },
                "install": {
                    "font_installation_start": ["mkdir -p ~/.fonts"],
                    "font-agave-nerd-font": [
                        "ABK_FONT_NAME=Agave",
                        "curl -L https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/${ABK_FONT_NAME}.tar.xz -o fonts.tar.xz",
                        "mkdir -p ./fonts && tar -xvf fonts.tar.xz -C ./fonts",
                        "mv ./fonts/${ABK_FONT_NAME}NerdFont* ~/.fonts/",
                        "rm -f fonts.tar.xz",
                        "rm -Rf ./fonts"
                    ],
                    "font-comic-shanns-mono-nerd-font": [
                        "ABK_FONT_NAME=ComicShannsMono",
                        "curl -L https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/${ABK_FONT_NAME}.tar.xz -o fonts.tar.xz",
                        "mkdir -p ./fonts && tar -xvf fonts.tar.xz -C ./fonts",
                        "mv ./fonts/${ABK_FONT_NAME}NerdFont* ~/.fonts/",
                        "rm -f fonts.tar.xz",
                        "rm -Rf ./fonts"
                    ],
                    "font-droid-sans-mono-nerd-font": [
                        "ABK_FONT_NAME=DroidSansMono",
                        "curl -L https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/${ABK_FONT_NAME}.tar.xz -o fonts.tar.xz",
                        "mkdir -p ./fonts && tar -xvf fonts.tar.xz -C ./fonts",
                        "mv ./fonts/DroidSansMNerdFont* ~/.fonts/",
                        "rm -f fonts.tar.xz",
                        "rm -Rf ./fonts"
                    ],
                    "font-cascadia-code": [
                        "ABK_FONT_NAME=CascadiaCode",
                        "curl -L https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/${ABK_FONT_NAME}.tar.xz -o fonts.tar.xz",
                        "mkdir -p ./fonts && tar -xvf fonts.tar.xz -C ./fonts",
                        "mv ./fonts/CaskaydiaCoveNerdFont* ~/.fonts/",
                        "rm -f fonts.tar.xz",
                        "rm -Rf ./fonts"
                    ],
                    "font-hack-nerd-font": [
                        "ABK_FONT_NAME=Hack",
                        "curl -L https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/${ABK_FONT_NAME}.tar.xz -o fonts.tar.xz",
                        "mkdir -p ./fonts && tar -xvf fonts.tar.xz -C ./fonts",
                        "mv ./fonts/${ABK_FONT_NAME}NerdFont* ~/.fonts/",
                        "rm -f fonts.tar.xz",
                        "rm -Rf ./fonts"
                    ],
                    "font_installation_cleanup": [
                        "fc-cache -fv"
                    ]
                },
                "uninstall": {
                    "font-agave-nerd-font": ["rm -f ~/.fonts/AgaveNerdFont*"],
                    "font-comic-shanns-mono-nerd-font": ["rm -f ~/.fonts/ComicShannsMonoNerdFont*"],
                    "font-droid-sans-mono-nerd-font": ["rm -f ~/.fonts/DroidSansMNerdFont*"],
                    "font-cascadia-code": ["rm -f ~/.fonts/CaskaydiaCoveNerdFont*"],
                    "font-hack-nerd-font": ["rm -f ~/.fonts/Hack*"],
                    "font_installation_cleanup": ["fc-cache -fv"]
                }
            }
        }
    }
}
